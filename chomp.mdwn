# Chomp

1. Build a move struct with a row and column index.

2. Your board will be a R x C array of "boolean".  I will
   assume that this array is zero-based in this pseudocode.
   Initially, let R = 3, C = 4.

3. Write a function/method to initialize a board to all
   true.

4. Write a function to print a board (in ASCII, because
   graphics code takes forever). I used o and . as the board
   characters.

5. Write a function to make a move gotten from a human. Use
   whatever syntax is easy and makes you comfortable. Your
   function should return a valid Move struct. Don't overdo
   the error checking and beauty at this stage. My function
   took seven lines.

6. Write a function to make a move r, c on a board, by changing
   all squares that are at or below both r and c to false.

7. OK, here comes the interesting part...
   &nbsp;
   <!-- This pseudocode translated from negamax.pseu by pseuf -->
   > negamax(*b*,&nbsp;*d*):  
   > &nbsp;&nbsp;&nbsp;&nbsp;*rx*&nbsp;&#8592;&nbsp;0  
   > &nbsp;&nbsp;&nbsp;&nbsp;*cx*&nbsp;&#8592;&nbsp;0  
   > &nbsp;&nbsp;&nbsp;&nbsp;**for**&nbsp;*r*&nbsp;**in**&nbsp;0..R-1  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**for**&nbsp;*c*&nbsp;**in**&nbsp;0..C-1  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**if**&nbsp;*b*[*r*][*c*]&nbsp;&#8743;&nbsp;(*r*&nbsp;&gt;&nbsp;0&nbsp;&#8744;&nbsp;*c*&nbsp;&gt;&nbsp;0)  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*rx*&nbsp;&#8592;&nbsp;*r*  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*cx*&nbsp;&#8592;&nbsp;*c*  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*b&#x2032;*&nbsp;&#8592;&nbsp;copy&nbsp;*b*  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;makeMove(*b&#x2032;*,&nbsp;*r*,&nbsp;*c*)  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**if**&nbsp;negamax(*b&#x2032;*,&nbsp;*d*&nbsp;+&nbsp;1)  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**continue**  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**if**&nbsp;*d*&nbsp;=&nbsp;0:  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;makeMove(*b*,&nbsp;*r*,&nbsp;*c*)  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;the&nbsp;move&nbsp;*r*,&nbsp;*c*  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;that&nbsp;the&nbsp;program&nbsp;is&nbsp;winning  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**return**&nbsp;*true*  
   > &nbsp;&nbsp;&nbsp;&nbsp;**if**&nbsp;*d*&nbsp;=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;---&nbsp;no&nbsp;winning&nbsp;moves,&nbsp;so&nbsp;just&nbsp;pick&nbsp;a&nbsp;loser  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;makeMove(*b*,&nbsp;*rx*,&nbsp;*cx*)  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;the&nbsp;move&nbsp;*rx*,&nbsp;*cx*  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**if**&nbsp;*r*&nbsp;=&nbsp;0&nbsp;&#8743;&nbsp;*c*&nbsp;=&nbsp;0  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;that&nbsp;the&nbsp;program&nbsp;has&nbsp;lost  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**else**&nbsp;  
   > &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;that&nbsp;the&nbsp;program&nbsp;is&nbsp;losing  
   > &nbsp;&nbsp;&nbsp;&nbsp;**return**&nbsp;*false*  
   <!-- End of pseuf translation of negamax.pseu -->

8. Now you just need to write a main program that
   alternately calls negamax() and your human move()
   function until someone loses.
